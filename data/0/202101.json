[
    { 
      "seq": 1,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "운영체제 분석을 위해 리눅스에서 버전을 확인하고자 할 때 사용되는 명령어는?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "ls" 
        },
        { 
          "isAnswer": "n",
          "example": "npm" 
        },
        { 
          "isAnswer": "n",
          "example": "pwd" 
        },
        { 
          "isAnswer": "y",
          "example": "uname" 
        }
      ]
    },
    { 
      "seq": 2,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "통신을 위한 프로그램을 생성하여 포트를 할당하고, 클라이언트의 통신 요청 시 클라이언트와 연결하는 내·외부 송·수신 연계기술은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "DB링크 기술" 
        },
        { 
          "isAnswer": "y",
          "example": "소켓 기술" 
        },
        { 
          "isAnswer": "n",
          "example": "스크럼 기술" 
        },
        { 
          "isAnswer": "n",
          "example": "프로토타입 기술" 
        }
      ]
    },
    { 
      "seq": 3,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "객체지향 개념에서 연관된 데이터와 함수를 함께 묶어 외부와 경계를 만들고 필요한 인터페이스만을 밖으로 드러내는 과정은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "메시지(Message)" 
        },
        { 
          "isAnswer": "y",
          "example": "캡슐화(Encapsulation)" 
        },
        { 
          "isAnswer": "n",
          "example": "다형성(Polymorphism)" 
        },
        { 
          "isAnswer": "n",
          "example": "상속(Inheritance)" 
        }
      ]
    },
    { 
      "seq": 4,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "GoF(Gangs of Four) 디자인 패턴의 생성패턴에 속하지 않는 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "추상 팩토리(Abstract Factory)" 
        },
        { 
          "isAnswer": "n",
          "example": "빌더(Builder)" 
        },
        { 
          "isAnswer": "y",
          "example": "어댑터(Adapter)" 
        },
        { 
          "isAnswer": "n",
          "example": "싱글턴(Singleton)" 
        }
      ]
    },
    { 
      "seq": 5,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "응용프로그램의 프로시저를 사용하여 원격 프로시저를 로컬 프로시저처럼 호출하는 방식의 미들웨어는?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "WAS(Web Application Server)" 
        },
        { 
          "isAnswer": "n",
          "example": " MOM(Message Oriented Middleware)" 
        },
        { 
          "isAnswer": "y",
          "example": "RPC(Remote Procedure Call)" 
        },
        { 
          "isAnswer": "n",
          "example": "ORB(Object Request Broker)" 
        }
      ]
    },
    { 
      "seq": 6,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "바람직한 소프트웨어 설계 지침이 아닌 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "모듈의 기능을 예측할 수 있도록 정의한다." 
        },
        { 
          "isAnswer": "n",
          "example": "이식성을 고려한다." 
        },
        { 
          "isAnswer": "n",
          "example": "적당한 모듈의 크기를 유지한다" 
        },
        { 
          "isAnswer": "y",
          "example": "가능한 모듈을 독립적으로 생성하고 결합도를 최대화한다." 
        }
      ]
    },
    { 
      "seq": 7,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "객체지향 분석 방법론 중 Coad-Yourdon 방법에 해당하는 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "E-R 다이어그램을 사용하여 객체의 행위를 데이터 모델링하는데 초점을 둔 방법이다" 
        },
        { 
          "isAnswer": "n",
          "example": "객체, 동적, 기능 모델로 나누어 수행하는 방법이다. " 
        },
        { 
          "isAnswer": "n",
          "example": "미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 방법이다." 
        },
        { 
          "isAnswer": "y",
          "example": "Use-Case를 강조하여 사용하는 방법이다." 
        }
      ]
    },
    { 
      "seq": 8,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "다음은 어떤 프로그램 구조를 나타낸다. 모듈 F에서의 fan-in과 fan-out의 수는 얼마인가?",
      "infos": [
          { 
              "type": "img",
              "src": "https://user-images.githubusercontent.com/52397976/139526744-f97dd650-402a-4429-99fc-65ea78b771f9.png" 
          }
      ],
      "answers": [
        { 
          "isAnswer": "y",
          "example": "fan-in：2, fan-out：3" 
        },
        { 
          "isAnswer": "n",
          "example": "fan-in：3, fan-out：2" 
        },
        { 
          "isAnswer": "n",
          "example": "fan-in：1, fan-out：2" 
        },
        { 
          "isAnswer": "n",
          "example": "fan-in：2, fan-out：1" 
        }
      ]
    },
    { 
      "seq": 9,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "현행 시스템 분석에서 고려하지 않아도 되는 항목은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "DBMS 분석" 
        },
        { 
          "isAnswer": "n",
          "example": "네트워크 분석" 
        },
        { 
          "isAnswer": "n",
          "example": "운영체제 분석" 
        },
        { 
          "isAnswer": "y",
          "example": "인적 자원 분석" 
        }
      ]
    },
    { 
      "seq": 10,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "분산 컴퓨팅 환경에서 서로 다른 기종 간의 하드웨어나 프로토콜, 통신환경 등을 연결하여 응용프로그램과 운영환경 간에 원만한 통신이 이루어질 수 있게 서비스를 제공하는 소프트웨어는?",
      "answers": [
        { 
          "isAnswer": "y",
          "example": "미들웨어" 
        },
        { 
          "isAnswer": "n",
          "example": "미들웨어" 
        },
        { 
          "isAnswer": "n",
          "example": "오픈허브웨어" 
        },
        { 
          "isAnswer": "n",
          "example": "그레이웨어" 
        }
      ]
    },
    { 
      "seq": 11,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "CASE(Computer Aided Software Engineering)에 대한 설명으로 틀린 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "소프트웨어 모듈의 재사용성이 향상된다." 
        },
        { 
          "isAnswer": "n",
          "example": "자동화된 기법을 통해 소프트웨어 품질이 향상된다." 
        },
        { 
          "isAnswer": "y",
          "example": "소프트웨어 사용자들에게 사용 방법을 신속히 숙지시키기 위해 사용된다." 
        },
        { 
          "isAnswer": "n",
          "example": "소프트웨어 유지보수를 간편하게 수행할 수 있다." 
        }
      ]
    },
    { 
      "seq": 12,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "UML(Unified Modeling Language)에 대한 설명 중 틀린 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "기능적 모델은 사용자 측면에서 본 시스템 기능이며, UML에서는 Use case Diagram을 사용한다." 
        },
        { 
          "isAnswer": "n",
          "example": "정적 모델은 객체, 속성, 연관관계, 오퍼레이션의 시스템의 구조를 나타내며, UML에서는 Class Diagram을 사용한다" 
        },
        { 
          "isAnswer": "n",
          "example": "동적 모델은 시스템의 내부 동작을 말하며, UML에서는 Sequence Diagram, State Diagram, Activity Diagram을 사용한다." 
        },
        { 
          "isAnswer": "y",
          "example": "State Diagram은 객체들 사이의 메시지 교환을 나타내며, Sequence Diagram은 하나의 객체가 가진 상태와 그 상태의 변화에 의한 동작순서를 나타낸다." 
        }
      ]
    },
    { 
      "seq": 13,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "기본 유스케이스 수행 시 특별한 조건을 만족할 때 수행하는 유스케이스는?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "연관" 
        },
        { 
          "isAnswer": "y",
          "example": "확장" 
        },
        { 
          "isAnswer": "n",
          "example": "선택" 
        },
        { 
          "isAnswer": "n",
          "example": "특화" 
        }
      ]
    },
    { 
      "seq": 14,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "다음 중 요구사항 모델링에 활용되지 않는 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "애자일(Agile) 방법" 
        },
        { 
          "isAnswer": "n",
          "example": "유스케이스 다이어그램(Use Case Diagram)" 
        },
        { 
          "isAnswer": "n",
          "example": "시퀀스 다이어그램(Sequence Diagram)" 
        },
        { 
          "isAnswer": "y",
          "example": "단계 다이어그램(Phase Diagram)" 
        }
      ]
    },
    { 
      "seq": 15,
      "subject": 1,
      "subjectName": "소프트웨어 설계",
      "question": "디자인 패턴을 이용한 소프트웨어 재사용으로 얻어지는 장점이 아닌 것은?",
      "answers": [
        { 
          "isAnswer": "n",
          "example": "소프트웨어 코드의 품질을 향상시킬 수 있다." 
        },
        { 
          "isAnswer": "y",
          "example": "개발 프로세스를 무시할 수 있다." 
        },
        { 
          "isAnswer": "n",
          "example": "개발자들 사이의 의사소통을 원활하게 할 수 있다." 
        },
        { 
          "isAnswer": "n",
          "example": "소프트웨어의 품질과 생산성을 향상시킬 수 있다." 
        }
      ]
    }
]
